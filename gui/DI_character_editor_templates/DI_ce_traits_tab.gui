template DI_CE_Traits_Tab
{
    vbox = {
        name = "traits_tab"
        visible = "[GetVariableSystem.HasValue('char_editor_tab', 'traits')]"
        layoutpolicy_horizontal = expanding

        datacontext = "[GetPlayer]"

        margin = { 20 5 }

        using = Animation_Tab_Switch

        state = {
            name = set_category
            trigger_when = "[GetScriptedGui('DI_traits_list').IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"

            on_finish = "[GetVariableSystem.Set( 'ce_traits_tab', 'physical' )]"
        }

        state = {
            name = traits_list
            trigger_when = "[Not(GetScriptedGui('DI_traits_list').IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).End))]"

            on_finish = "[GetVariableSystem.Set( 'ce_traits_tab', 'debug' )]"
        }

        vbox = {
            name = "trait_selection_panel"
            layoutpolicy_vertical = expanding

            using =  Animation_Tab_Switch

            scrollbox = {
                name = "debug_selection_list"
                layoutpolicy_horizontal = expanding
                size = { 400 350 }

                visible = "[GetVariableSystem.HasValue( 'ce_traits_tab', 'debug' )]"

                blockoverride "scrollbox_content"
                {
                    hbox = {
                        datamodel = "[GetOtherRulerDesignerTraits]"

                        item = {
                            widget_DI_trait_loader = {
                            }
                        }
                    }
                }
            }

            scrollbox = {
                name = "physical_trait_selection_list"
                layoutpolicy_horizontal = expanding
                size = { 400 350 }

                visible = "[GetVariableSystem.HasValue( 'ce_traits_tab', 'physical' )]"

                blockoverride "scrollbox_content"
                {
                    vbox_DI_trait_selection_content = {
                        layoutpolicy_horizontal = expanding
                        datamodel = "[GetGlobalList('DI_misc_traits')]"

                        blockoverride "test_visible"
                        {
                            visible = "[EqualTo_string(Trait.GetTraitCategoryLabel, Localize('TRAIT_CATEGORY_PHYSICAL'))]"
                        }
                    }
                }
            }


            scrollbox = {
                name = "education_trait_selection_list"
                layoutpolicy_horizontal = expanding
                size = { 400 350 }

                visible = "[GetVariableSystem.HasValue( 'ce_traits_tab', 'education' )]"

                blockoverride "scrollbox_content"
                {
                    vbox_DI_trait_selection_content = {
                        layoutpolicy_horizontal = expanding
                        datamodel = "[GetEducationTraits]"
                    }
                }
            }

            scrollbox = {
                name = "commander_trait_selection_list"
                layoutpolicy_horizontal = expanding
                size = { 400 350 }

                visible = "[GetVariableSystem.HasValue( 'ce_traits_tab', 'commander' )]"

                blockoverride "scrollbox_content"
                {
                    vbox_DI_trait_selection_content = {
                        layoutpolicy_horizontal = expanding
                        datamodel = "[GetGlobalList('DI_commander_traits')]"

                        # blockoverride "test_visible"
                        # {
                        #     visible = "[EqualTo_string(Trait.GetTraitCategoryLabel, Localize('TRAIT_CATEGORY_COMMANDER'))]"
                        # }
                    }
                }
            }

            scrollbox = {
                name = "personality_trait_selection_list"
                layoutpolicy_horizontal = expanding
                size = { 400 350 }

                visible = "[GetVariableSystem.HasValue( 'ce_traits_tab', 'personality' )]"

                blockoverride "scrollbox_content"
                {
                    vbox_DI_trait_selection_content = {
                        layoutpolicy_horizontal = expanding
                        datamodel = "[GetPersonalityTraits]"
                    }
                }
            }

            scrollbox = {
                name = "health_trait_selection_list"
                layoutpolicy_horizontal = expanding
                size = { 400 350 }

                visible = "[GetVariableSystem.HasValue( 'ce_traits_tab', 'health' )]"

                blockoverride "scrollbox_content"
                {
                    vbox_DI_trait_selection_content = {
                        layoutpolicy_horizontal = expanding
                        datamodel = "[GetGlobalList('DI_health_traits')]"

                        # blockoverride "test_visible"
                        # {
                        #     visible = "[EqualTo_string(Trait.GetTraitCategoryLabel, Localize('TRAIT_CATEGORY_HEALTH'))]"
                        # }
                    }
                }
            }

            scrollbox = {
                name = "fame_trait_selection_list"
                layoutpolicy_horizontal = expanding
                size = { 400 350 }

                visible = "[GetVariableSystem.HasValue( 'ce_traits_tab', 'fame' )]"

                blockoverride "scrollbox_content"
                {
                    vbox_DI_trait_selection_content = {
                        layoutpolicy_horizontal = expanding
                        datamodel = "[GetGlobalList('DI_fame_traits')]"

                        # blockoverride "test_visible"
                        # {
                        #     visible = "[Or(EqualTo_string(Trait.GetTraitCategoryLabel, Localize('TRAIT_CATEGORY_FAME')), Or(EqualTo_string(Trait.GetKey, 'poet'), EqualTo_string(Trait.GetKey, 'confider')))]"
                        # }
                    }
                }
            }

            scrollbox = {
                name = "other_trait_selection_list"
                layoutpolicy_horizontal = expanding
                size = { 400 350 }

                visible = "[GetVariableSystem.HasValue( 'ce_traits_tab', 'other' )]"

                blockoverride "scrollbox_content"
                {
                    vbox_DI_trait_selection_content = {
                        layoutpolicy_horizontal = expanding
                        datamodel = "[GetGlobalList('DI_misc_traits')]"

                        blockoverride "test_visible"
                        {
                            visible = "[Not(EqualTo_string(Trait.GetTraitCategoryLabel, Localize('TRAIT_CATEGORY_PHYSICAL')))]"
                        }
                    }
                }
            }

            scrollbox = {
                name = "lifestyle_trait_selection_list"
                layoutpolicy_horizontal = expanding
                size = { 400 350 }

                visible = "[GetVariableSystem.HasValue( 'ce_traits_tab', 'lifestyle' )]"


                blockoverride "scrollbox_content"
                {
                    vbox_DI_trait_selection_content = {
                        layoutpolicy_horizontal = expanding
                        datamodel = "[GetGlobalList('DI_lifestyle_traits')]"

                        # blockoverride "test_visible"
                        # {
                        #     visible = "[EqualTo_string(Trait.GetTraitCategoryLabel, Localize('TRAIT_CATEGORY_LIFESTYLE'))]"
                        # }
                    }
                }
            }

            scrollbox = {
                name = "pinned_trait_selection_list"
                layoutpolicy_horizontal = expanding
                size = { 400 350 }

                visible = "[GetVariableSystem.HasValue( 'ce_traits_tab', 'pinned' )]"

                state = {
                    name = "list_check"
                    using = Animation_FadeIn_Quick
                    trigger_when = "[GetScriptedGui('DI_pinned_trait_check').IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
                    on_start = "[GetScriptedGui('DI_create_pinned_trait_list').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
                    on_start = "[GetScriptedGui('DI_pinned_trait_check').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
                }


                blockoverride "scrollbox_content"
                {
                    vbox_DI_trait_selection_content = {
                        layoutpolicy_horizontal = expanding
                        datamodel = "[GetPlayer.MakeScope.GetList('DI_pinned_traits')]"
                    }
                }
            }

            # tracked traits
            scrollbox = {
                name = "tracked_trait_selection_list"
                layoutpolicy_horizontal = expanding
                size = { 400 350 }

                visible = "[GetVariableSystem.HasValue( 'ce_traits_tab', 'tracked' )]"

                blockoverride "scrollbox_content"
                {
                    vbox_DI_tracked_trait_selection_content = {
                        layoutpolicy_horizontal = expanding
                        datamodel = "[GetGlobalList('DI_tracked_traits')]"
                    }
                }
            }
        }
    }
}

template DI_CE_Traits_Tab_Big
{
    vbox = {
        name = "traits_tab"
        visible = "[GetVariableSystem.Exists('DI_trait_window_visible')]"
        layoutpolicy_horizontal = expanding

        datacontext = "[GetPlayer]"

        margin = { 20 5 }

        using = Animation_Tab_Switch

        state = {
            name = set_category
            trigger_when = "[GetScriptedGui('DI_traits_list').IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"

            on_finish = "[GetVariableSystem.Set( 'ce_traits_tab', 'physical' )]"
        }

        state = {
            name = traits_list
            trigger_when = "[Not(GetScriptedGui('DI_traits_list').IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).End))]"

            on_finish = "[GetVariableSystem.Set( 'ce_traits_tab', 'debug' )]"
        }

        vbox = {
            name = "trait_selection_panel"
            layoutpolicy_vertical = expanding

            using =  Animation_Tab_Switch

            scrollbox = {
                name = "debug_selection_list"
                layoutpolicy_horizontal = expanding
                size = { 500 780}

                visible = "[GetVariableSystem.HasValue( 'ce_traits_tab', 'debug' )]"

                blockoverride "scrollbox_content"
                {
                    hbox = {
                        datamodel = "[GetOtherRulerDesignerTraits]"

                        item = {
                            widget_DI_trait_loader = {
                            }
                        }
                    }
                }
            }

            scrollbox = {
                name = "physical_trait_selection_list"
                layoutpolicy_horizontal = expanding
                size = { 500 780}

                visible = "[GetVariableSystem.HasValue( 'ce_traits_tab', 'physical' )]"

                blockoverride "scrollbox_content"
                {
                    vbox_DI_trait_selection_content = {
                        layoutpolicy_horizontal = expanding
                        datamodel = "[GetGlobalList('DI_misc_traits')]"

                        blockoverride "test_visible"
                        {
                            visible = "[EqualTo_string(Trait.GetTraitCategoryLabel, Localize('TRAIT_CATEGORY_PHYSICAL'))]"
                        }
                    }
                }
            }


            scrollbox = {
                name = "education_trait_selection_list"
                layoutpolicy_horizontal = expanding
                size = { 500 780}

                visible = "[GetVariableSystem.HasValue( 'ce_traits_tab', 'education' )]"

                blockoverride "scrollbox_content"
                {
                    vbox_DI_trait_selection_content = {
                        layoutpolicy_horizontal = expanding
                        datamodel = "[GetEducationTraits]"
                    }
                }
            }

            scrollbox = {
                name = "commander_trait_selection_list"
                layoutpolicy_horizontal = expanding
                size = { 500 780}

                visible = "[GetVariableSystem.HasValue( 'ce_traits_tab', 'commander' )]"

                blockoverride "scrollbox_content"
                {
                    vbox_DI_trait_selection_content = {
                        layoutpolicy_horizontal = expanding
                        datamodel = "[GetGlobalList('DI_commander_traits')]"

                        # blockoverride "test_visible"
                        # {
                        #     visible = "[EqualTo_string(Trait.GetTraitCategoryLabel, Localize('TRAIT_CATEGORY_COMMANDER'))]"
                        # }
                    }
                }
            }

            scrollbox = {
                name = "personality_trait_selection_list"
                layoutpolicy_horizontal = expanding
                size = { 500 780}

                visible = "[GetVariableSystem.HasValue( 'ce_traits_tab', 'personality' )]"

                blockoverride "scrollbox_content"
                {
                    vbox_DI_trait_selection_content = {
                        layoutpolicy_horizontal = expanding
                        datamodel = "[GetPersonalityTraits]"
                    }
                }
            }

            scrollbox = {
                name = "health_trait_selection_list"
                layoutpolicy_horizontal = expanding
                size = { 500 780}

                visible = "[GetVariableSystem.HasValue( 'ce_traits_tab', 'health' )]"

                blockoverride "scrollbox_content"
                {
                    vbox_DI_trait_selection_content = {
                        layoutpolicy_horizontal = expanding
                        datamodel = "[GetGlobalList('DI_health_traits')]"

                        # blockoverride "test_visible"
                        # {
                        #     visible = "[EqualTo_string(Trait.GetTraitCategoryLabel, Localize('TRAIT_CATEGORY_HEALTH'))]"
                        # }
                    }
                }
            }

            scrollbox = {
                name = "fame_trait_selection_list"
                layoutpolicy_horizontal = expanding
                size = { 500 780}

                visible = "[GetVariableSystem.HasValue( 'ce_traits_tab', 'fame' )]"

                blockoverride "scrollbox_content"
                {
                    vbox_DI_trait_selection_content = {
                        layoutpolicy_horizontal = expanding
                        datamodel = "[GetGlobalList('DI_fame_traits')]"

                        # blockoverride "test_visible"
                        # {
                        #     visible = "[Or(EqualTo_string(Trait.GetTraitCategoryLabel, Localize('TRAIT_CATEGORY_FAME')), Or(EqualTo_string(Trait.GetKey, 'poet'), EqualTo_string(Trait.GetKey, 'confider')))]"
                        # }
                    }
                }
            }

            scrollbox = {
                name = "other_trait_selection_list"
                layoutpolicy_horizontal = expanding
                size = { 500 780}

                visible = "[GetVariableSystem.HasValue( 'ce_traits_tab', 'other' )]"

                blockoverride "scrollbox_content"
                {
                    vbox_DI_trait_selection_content = {
                        layoutpolicy_horizontal = expanding
                        datamodel = "[GetGlobalList('DI_misc_traits')]"

                        blockoverride "test_visible"
                        {
                            visible = "[Not(EqualTo_string(Trait.GetTraitCategoryLabel, Localize('TRAIT_CATEGORY_PHYSICAL')))]"
                        }
                    }
                }
            }

            scrollbox = {
                name = "lifestyle_trait_selection_list"
                layoutpolicy_horizontal = expanding
                size = { 500 780}

                visible = "[GetVariableSystem.HasValue( 'ce_traits_tab', 'lifestyle' )]"


                blockoverride "scrollbox_content"
                {
                    vbox_DI_trait_selection_content = {
                        layoutpolicy_horizontal = expanding
                        datamodel = "[GetGlobalList('DI_lifestyle_traits')]"

                        # blockoverride "test_visible"
                        # {
                        #     visible = "[EqualTo_string(Trait.GetTraitCategoryLabel, Localize('TRAIT_CATEGORY_LIFESTYLE'))]"
                        # }
                    }
                }
            }

            scrollbox = {
                name = "pinned_trait_selection_list"
                layoutpolicy_horizontal = expanding
                size = { 500 780}

                visible = "[GetVariableSystem.HasValue( 'ce_traits_tab', 'pinned' )]"

                state = {
                    name = "list_check"
                    using = Animation_FadeIn_Quick
                    trigger_when = "[GetScriptedGui('DI_pinned_trait_check').IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
                    on_start = "[GetScriptedGui('DI_create_pinned_trait_list').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
                    on_start = "[GetScriptedGui('DI_pinned_trait_check').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
                }


                blockoverride "scrollbox_content"
                {
                    vbox_DI_trait_selection_content = {
                        layoutpolicy_horizontal = expanding
                        datamodel = "[GetPlayer.MakeScope.GetList('DI_pinned_traits')]"
                    }
                }
            }

            # tracked traits
            scrollbox = {
                name = "tracked_trait_selection_list"
                layoutpolicy_horizontal = expanding
                size = { 500 780}

                visible = "[GetVariableSystem.HasValue( 'ce_traits_tab', 'tracked' )]"

                blockoverride "scrollbox_content"
                {
                    vbox_DI_tracked_trait_selection_content = {
                        layoutpolicy_horizontal = expanding
                        datamodel = "[GetGlobalList('DI_tracked_traits')]"
                    }
                }
            }
        }
    }
}


# Traits Tabs
template DI_CE_Traits_Tabs
{
    vbox = {
        name = "traits_tabs"
        visible = "[Or(GetVariableSystem.HasValue('char_editor_tab', 'traits'), GetVariableSystem.Exists('DI_trait_window_visible'))]"
        layoutpolicy_horizontal = expanding
        layoutpolicy_vertical = expanding
        margin = { 35 10 }

        hbox = {
            layoutpolicy_horizontal = expanding

            # physical tab
            button_tab = {
                layoutpolicy_horizontal = expanding
                onclick = "[GetVariableSystem.Set('ce_traits_tab', 'physical')]"
                down = "[GetVariableSystem.HasValue('ce_traits_tab', 'physical')]"

                text_single = {
                    parentanchor = center
                    text = DI_ce_tab_physical
                    maximumsize = { 400 -1 }
                    default_format = "#low"
                }
            }

            # education tab
            button_tab = {
                layoutpolicy_horizontal = expanding
                onclick = "[GetVariableSystem.Set('ce_traits_tab', 'education')]"
                down = "[GetVariableSystem.HasValue('ce_traits_tab', 'education')]"

                text_single = {
                    parentanchor = center
                    text = DI_ce_tab_education
                    maximumsize = { 400 -1 }
                    default_format = "#low"
                }
            }

            # commander tab
            button_tab = {
                layoutpolicy_horizontal = expanding
                onclick = "[GetVariableSystem.Set('ce_traits_tab', 'commander')]"
                down = "[GetVariableSystem.HasValue('ce_traits_tab', 'commander')]"

                text_single = {
                    parentanchor = center
                    text = DI_ce_tab_commander
                    maximumsize = { 400 -1 }
                    default_format = "#low"
                }
            }

            # lifestyle tab
            button_tab = {
                layoutpolicy_horizontal = expanding
                onclick = "[GetVariableSystem.Set('ce_traits_tab', 'lifestyle')]"
                down = "[GetVariableSystem.HasValue('ce_traits_tab', 'lifestyle')]"

                text_single = {
                    parentanchor = center
                    text = DI_ce_tab_lifestyle
                    maximumsize = { 400 -1 }
                    default_format = "#low"
                }
            }

            # personality tab
            button_tab = {
                layoutpolicy_horizontal = expanding
                onclick = "[GetVariableSystem.Set('ce_traits_tab', 'personality')]"
                down = "[GetVariableSystem.HasValue('ce_traits_tab', 'personality')]"

                text_single = {
                    parentanchor = center
                    text = DI_ce_tab_personality
                    maximumsize = { 400 -1 }
                    default_format = "#low"
                }
            }
        }

        hbox = {
            layoutpolicy_horizontal = expanding

            # health tab
            button_tab = {
                layoutpolicy_horizontal = expanding
                onclick = "[GetVariableSystem.Set('ce_traits_tab', 'health')]"
                down = "[GetVariableSystem.HasValue('ce_traits_tab', 'health')]"

                text_single = {
                    parentanchor = center
                    text = DI_ce_tab_health
                    maximumsize = { 400 -1 }
                    default_format = "#low"
                }
            }

            # fame tab
            button_tab = {
                layoutpolicy_horizontal = expanding
                onclick = "[GetVariableSystem.Set('ce_traits_tab', 'fame')]"
                down = "[GetVariableSystem.HasValue('ce_traits_tab', 'fame')]"

                text_single = {
                    parentanchor = center
                    text = DI_ce_tab_fame
                    maximumsize = { 400 -1 }
                    default_format = "#low"
                }
            }

            # other tab
            button_tab = {
                layoutpolicy_horizontal = expanding
                onclick = "[GetVariableSystem.Set('ce_traits_tab', 'other')]"
                down = "[GetVariableSystem.HasValue('ce_traits_tab', 'other')]"

                text_single = {
                    parentanchor = center
                    text = DI_ce_tab_other
                    maximumsize = { 400 -1 }
                    default_format = "#low"
                }
            }

            # tracked tab
            button_tab = {
                layoutpolicy_horizontal = expanding
                onclick = "[GetVariableSystem.Set('ce_traits_tab', 'tracked')]"
                down = "[GetVariableSystem.HasValue('ce_traits_tab', 'tracked')]"

                text_single = {
                    parentanchor = center
                    text = DI_ce_tab_tracked
                    maximumsize = { 400 -1 }
                    default_format = "#low"
                }
            }

            # pinned tab
            button_tab = {
                layoutpolicy_horizontal = expanding
                onclick = "[GetVariableSystem.Set('ce_traits_tab', 'pinned')]"
                down = "[GetVariableSystem.HasValue('ce_traits_tab', 'pinned')]"

                text_single = {
                    parentanchor = center
                    text = DI_ce_tab_pinned
                    maximumsize = { 400 -1 }
                    default_format = "#low"
                }
            }
        }
        expand = {}
    }
}

template DI_character_trait_tooltip {
    object_tooltip_pop_out = {

        blockoverride "header_additions" {
            hbox = {
                margin_right = 10
                margin_top = 8
                margin_left = -4

                trait_icon_texture = {
                    blockoverride "icon_size"
                    {
                        size = { 52 52 }
                        tintcolor = "[TooltipInfo.GetTintColor]"
                    }
                }
            }
        }

        blockoverride "title_text" {
            margin = { 0 8 }
            text = "[Trait.GetNameNoTooltipWithDefault( Character.Self )]"
        }

        blockoverride "concept_link" {
            text = "[Trait.GetTraitCategoryLabel]"
        }

        blockoverride "description_text" {
            block "actual_description_text" {
                text = "[Trait.GetFullDescription( Character.Self, Faith.Self )]"
            }
        }

        blockoverride "extra_data_after_description"
        {
            vbox = {
                name = "trait_level_tracks"
                layoutpolicy_horizontal = expanding
                visible = "[DataModelHasItems( Trait.GetLevelTracks )]"
                allow_outside = yes

                spacer = {
                    size = { 10 10 }
                }

                text_label_left = {
                    layoutpolicy_horizontal = expanding
                    text = "TRAIT_LEVEL_TRACKS_HEADER"
                }

                vbox = {
                    layoutpolicy_horizontal = expanding
                    datamodel = "[Trait.GetLevelTracks]"
                    spacing = 5
                    allow_outside = yes

                    item = {
                        vbox = {
                            layoutpolicy_horizontal = expanding
                            spacing = 5

                            hbox = {
                                layoutpolicy_horizontal = expanding
                                allow_outside = yes
                                spacing = 10
                                margin_right = 20

                                vbox = {
                                    margin_top = 6

                                    icon = {
                                        size = { 30 30 }
                                        texture = "[TraitLevelTrack.GetIcon( Trait.Self, Character.Self )]"
                                    }
                                }

                                vbox = {
                                    layoutpolicy_horizontal = expanding
                                    spacing = 5

                                    text_single = {
                                        layoutpolicy_horizontal = expanding
                                        text = "[TraitLevelTrack.GetName]"
                                    }

                                    widget = {
                                        size = { 0 15 }
                                        layoutpolicy_horizontal = expanding
                                        allow_outside = yes

                                        datacontext = "[Character.GetTraitTrackProgressBar( Trait.Self, TraitLevelTrack.Self )]"

                                        hbox_complex_bar_progress_next = {
                                            size = { 0 15 }
                                            layoutpolicy_horizontal = expanding
                                            tooltip = "TRAIT_LEVEL_TRACK_PROGRESS_TOOTLIP"
                                            using = tooltip_se
                                        }

                                        hbox_complex_bar_levels = {
                                            size = { 0 15 }
                                            layoutpolicy_horizontal = expanding

                                            blockoverride "marker"
                                            {
                                                widget_level_marker = {
                                                    scale = 0.75
                                                    datacontext = "[TraitLevelTrack.GetEntryForXp( ComplexBarItem.GetValue )]"
                                                    visible = "[GreaterThanOrEqualTo_int32( TraitLevelTrackEntry.GetLevel, '(int32)0' )]"

                                                    blockoverride "visible_active"
                                                    {
                                                        visible = "[EqualTo_int32( Character.GetTraitTrackLevel( Trait.Self, TraitLevelTrack.Self ), TraitLevelTrackEntry.GetLevel )]"
                                                    }

                                                    blockoverride "visible_inactive"
                                                    {
                                                        visible = "[Not( EqualTo_int32( Character.GetTraitTrackLevel( Trait.Self, TraitLevelTrack.Self ), TraitLevelTrackEntry.GetLevel ) )]"
                                                    }

                                                    blockoverride "marker_tooltip"
                                                    {
                                                        tooltip = "TRAIT_LEVEL_TRACK_TT"
                                                        using = tooltip_se
                                                    }

                                                    blockoverride "marker_text"
                                                    {
                                                        text = "[TraitLevelTrackEntry.GetLevel]"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            hbox = {
                                spacing = 5
                                margin_left = 18

                                button_round = {
                                    size = { 30 30 }
                                    raw_text = "0"
                                    onclick = "[GetScriptedGui('DI_add_trait_xp_0').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('trait', Trait.MakeScope).AddScope('track', MakeScopeFlag(TraitLevelTrack.GetName)).End)]"
                                }

                                button_round = {
                                    size = { 30 30 }
                                    raw_text = "1"
                                    onclick = "[GetScriptedGui('DI_add_trait_xp_1').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('trait', Trait.MakeScope).AddScope('track', MakeScopeFlag(TraitLevelTrack.GetName)).End)]"
                                }

                                button_round = {
                                    size = { 30 30 }
                                    raw_text = "2"
                                    onclick = "[GetScriptedGui('DI_add_trait_xp_2').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('trait', Trait.MakeScope).AddScope('track', MakeScopeFlag(TraitLevelTrack.GetName)).End)]"
                                }

                                text_label_center = {
                                    visible = "[InDebugMode]"
                                    layoutpolicy_horizontal = expanding
                                    text = "[TraitLevelTrack.GetName]"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

types DI_trait_menu_types
{
    type vbox_DI_trait_selection_content = vbox
    {
        datacontext = "[GetPlayer]"
        spacing = 3

        item = {
            hbox = {
                datacontext = "[Scope.Trait]"
                layoutpolicy_horizontal = expanding
                block "test_visible"
                {
                    visible = yes
                }
                button_standard = {
                    name = "trait_item"
                    layoutpolicy_horizontal = expanding
                    size = { 0 50 }
                    button_ignore = none

                    onclick = "[GetScriptedGui('DI_add_trait').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('trait', Trait.MakeScope).End)]"
                    onrightclick = "[GetScriptedGui('DI_remove_trait').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('trait', Trait.MakeScope).End)]"

                    hbox = {
                        margin = { 5 0 }
                        margin_right = 10
                        spacing = 10

                        DI_icon_trait = {
                            blockoverride "faith_context"
                            {
                                datacontext = "[GetPlayer.GetFaith]"
                            }
                            blockoverride "tooltip_placement"
                            {
                                using = tooltip_ws
                            }
                        }

                        text_single = {
                            layoutpolicy_horizontal = expanding

                            text = "[Trait.GetNameNoTooltip( Character.Self )]"

                            default_format = "#clickable"
                        }
                    }
                    tooltip = DI_trait_button_tt
                }

                hbox = {
                    margin = { 20 0 }

                    button_pin = {
                        name = "button_pin"
                        visible = "[Not(GetScriptedGui('DI_trait_pinned').IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('trait', Trait.MakeScope).End))]"
                        onclick = "[GetScriptedGui('DI_pin_trait').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('trait', Trait.MakeScope).End)]"
                        size = { 25 25 }
                    }

                    button_unpin = {
                        name = "button_unpin"
                        visible = "[GetScriptedGui('DI_trait_pinned').IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('trait', Trait.MakeScope).End)]"
                        onclick = "[GetScriptedGui('DI_unpin_trait').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('trait', Trait.MakeScope).End)]"
                        size = { 25 25 }
                    }
                }
            }
        }
    }

    type vbox_DI_tracked_trait_selection_content = vbox
    {
        datacontext = "[GetPlayer]"
        spacing = 3

        item = {
            hbox = {
                datacontext = "[Scope.Trait]"
                layoutpolicy_horizontal = expanding
                block "test_visible"
                {
                    visible = yes
                }
                vbox = {
                    layoutpolicy_horizontal = expanding
                    datamodel = "[Trait.GetLevelTracks]"
                    spacing = 5
                    allow_outside = yes

                    item = {
                        hbox = {
                            layoutpolicy_horizontal = expanding
                            allow_outside = yes
                            spacing = 5
                            margin_right = 20

                            vbox = {
                                margin_top = 6

                                button = {
                                    size = { 50 50 }
                                    texture = "[TraitLevelTrack.GetIcon( Trait.Self, Character.Self )]"
                                    button_ignore = none
                                    onclick = "[GetScriptedGui('DI_add_trait').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('trait', Trait.MakeScope).End)]"
                                    onrightclick = "[GetScriptedGui('DI_remove_trait').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('trait', Trait.MakeScope).End)]"
                                    tooltip = DI_trait_button_tt
                                }
                            }

                            vbox = {
                                layoutpolicy_horizontal = expanding
                                spacing = 5

                                text_single = {
                                    layoutpolicy_horizontal = expanding
                                    text = "[TraitLevelTrack.GetName]"
                                }

                                widget = {
                                    size = { 0 25 }
                                    layoutpolicy_horizontal = expanding
                                    allow_outside = yes

                                    datacontext = "[Character.GetTraitTrackProgressBar( Trait.Self, TraitLevelTrack.Self )]"

                                    hbox_complex_bar_progress_next = {
                                        size = { 0 15 }
                                        layoutpolicy_horizontal = expanding
                                        tooltip = "TRAIT_LEVEL_TRACK_PROGRESS_TOOTLIP"
                                        using = tooltip_se
                                    }

                                    hbox_complex_bar_levels = {
                                        size = { 0 15 }
                                        layoutpolicy_horizontal = expanding

                                        blockoverride "marker"
                                        {
                                            widget = {
                                                parentanchor = center
                                                size = { 0 40 }
                                                position = { -15 5 }
                                                allow_outside = yes

                                                button_round = {
                                                    scale = 0.75
                                                    visible = "[LessThan_int32(GetDataModelSize(Trait.GetLevelTracks), '(int32)2')]"
                                                    datacontext = "[TraitLevelTrack.GetEntryForXp( ComplexBarItem.GetValue )]"
                                                    raw_text = "[TraitLevelTrackEntry.GetLevel]"
                                                    onclick = "[GetScriptedGui('DI_add_trait_xp').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('trait', Trait.MakeScope).AddScope('track', MakeScopeFlag(TraitLevelTrack.GetName)).AddScope('xp', MakeScopeValue(TraitLevelTrackEntry.GetXpRequired)).End)]"
                                                }
                                                # Foot
                                                button_round = {
                                                    scale = 0.75
                                                    visible = "[EqualTo_string( TraitLevelTrack.GetName, Localize('trait_track_foot'))]"
                                                    datacontext = "[TraitLevelTrack.GetEntryForXp( ComplexBarItem.GetValue )]"
                                                    raw_text = "[TraitLevelTrackEntry.GetLevel]"
                                                    onclick = "[GetScriptedGui('DI_add_trait_xp').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('trait', Trait.MakeScope).AddScope('track', MakeScopeFlag('Foot')).AddScope('xp', MakeScopeValue(TraitLevelTrackEntry.GetXpRequired)).End)]"
                                                }
                                                # Bow
                                                button_round = {
                                                    scale = 0.75
                                                    visible = "[EqualTo_string( TraitLevelTrack.GetName, Localize('trait_track_bow'))]"
                                                    datacontext = "[TraitLevelTrack.GetEntryForXp( ComplexBarItem.GetValue )]"
                                                    raw_text = "[TraitLevelTrackEntry.GetLevel]"
                                                    onclick = "[GetScriptedGui('DI_add_trait_xp').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('trait', Trait.MakeScope).AddScope('track', MakeScopeFlag('Bow')).AddScope('xp', MakeScopeValue(TraitLevelTrackEntry.GetXpRequired)).End)]"
                                                }
                                                # Horse
                                                button_round = {
                                                    scale = 0.75
                                                    visible = "[EqualTo_string( TraitLevelTrack.GetName, Localize('trait_track_horse'))]"
                                                    datacontext = "[TraitLevelTrack.GetEntryForXp( ComplexBarItem.GetValue )]"
                                                    raw_text = "[TraitLevelTrackEntry.GetLevel]"
                                                    onclick = "[GetScriptedGui('DI_add_trait_xp').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('trait', Trait.MakeScope).AddScope('track', MakeScopeFlag('Horse')).AddScope('xp', MakeScopeValue(TraitLevelTrackEntry.GetXpRequired)).End)]"
                                                }
                                                # Wit
                                                button_round = {
                                                    scale = 0.75
                                                    visible = "[EqualTo_string( TraitLevelTrack.GetName, Localize('trait_track_wit'))]"
                                                    datacontext = "[TraitLevelTrack.GetEntryForXp( ComplexBarItem.GetValue )]"
                                                    raw_text = "[TraitLevelTrackEntry.GetLevel]"
                                                    onclick = "[GetScriptedGui('DI_add_trait_xp').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('trait', Trait.MakeScope).AddScope('track', MakeScopeFlag('Wit')).AddScope('xp', MakeScopeValue(TraitLevelTrackEntry.GetXpRequired)).End)]"
                                                }
                                                # Bandit
                                                button_round = {
                                                    scale = 0.75
                                                    visible = "[EqualTo_string( TraitLevelTrack.GetName, Localize('trait_track_bandit'))]"
                                                    datacontext = "[TraitLevelTrack.GetEntryForXp( ComplexBarItem.GetValue )]"
                                                    raw_text = "[TraitLevelTrackEntry.GetLevel]"
                                                    onclick = "[GetScriptedGui('DI_add_trait_xp').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('trait', Trait.MakeScope).AddScope('track', MakeScopeFlag('Bandit')).AddScope('xp', MakeScopeValue(TraitLevelTrackEntry.GetXpRequired)).End)]"
                                                }

                                                # Trickster
                                                button_round = {
                                                    scale = 0.75
                                                    visible = "[EqualTo_string( TraitLevelTrack.GetName, Localize('trait_track_trickster'))]"
                                                    datacontext = "[TraitLevelTrack.GetEntryForXp( ComplexBarItem.GetValue )]"
                                                    raw_text = "[TraitLevelTrackEntry.GetLevel]"
                                                    onclick = "[GetScriptedGui('DI_add_trait_xp').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('trait', Trait.MakeScope).AddScope('track', MakeScopeFlag('Trickster')).AddScope('xp', MakeScopeValue(TraitLevelTrackEntry.GetXpRequired)).End)]"
                                                }

                                                # Thief
                                                button_round = {
                                                    scale = 0.75
                                                    visible = "[EqualTo_string( TraitLevelTrack.GetName, Localize('trait_track_thief'))]"
                                                    datacontext = "[TraitLevelTrack.GetEntryForXp( ComplexBarItem.GetValue )]"
                                                    raw_text = "[TraitLevelTrackEntry.GetLevel]"
                                                    onclick = "[GetScriptedGui('DI_add_trait_xp').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('trait', Trait.MakeScope).AddScope('track', MakeScopeFlag('Thief')).AddScope('xp', MakeScopeValue(TraitLevelTrackEntry.GetXpRequired)).End)]"
                                                }

                                                # Poacher
                                                button_round = {
                                                    scale = 0.75
                                                    visible = "[EqualTo_string( TraitLevelTrack.GetName, Localize('trait_track_poacher'))]"
                                                    datacontext = "[TraitLevelTrack.GetEntryForXp( ComplexBarItem.GetValue )]"
                                                    raw_text = "[TraitLevelTrackEntry.GetLevel]"
                                                    onclick = "[GetScriptedGui('DI_add_trait_xp').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('trait', Trait.MakeScope).AddScope('track', MakeScopeFlag('Poacher')).AddScope('xp', MakeScopeValue(TraitLevelTrackEntry.GetXpRequired)).End)]"
                                                }

                                                # Marauder
                                                button_round = {
                                                    scale = 0.75
                                                    visible = "[EqualTo_string( TraitLevelTrack.GetName, Localize('trait_track_marauder'))]"
                                                    datacontext = "[TraitLevelTrack.GetEntryForXp( ComplexBarItem.GetValue )]"
                                                    raw_text = "[TraitLevelTrackEntry.GetLevel]"
                                                    onclick = "[GetScriptedGui('DI_add_trait_xp').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('trait', Trait.MakeScope).AddScope('track', MakeScopeFlag('Marauder')).AddScope('xp', MakeScopeValue(TraitLevelTrackEntry.GetXpRequired)).End)]"
                                                }

                                                # Travel
                                                button_round = {
                                                    scale = 0.75
                                                    visible = "[EqualTo_string( TraitLevelTrack.GetName, Localize('trait_track_travel'))]"
                                                    datacontext = "[TraitLevelTrack.GetEntryForXp( ComplexBarItem.GetValue )]"
                                                    raw_text = "[TraitLevelTrackEntry.GetLevel]"
                                                    onclick = "[GetScriptedGui('DI_add_trait_xp').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('trait', Trait.MakeScope).AddScope('track', MakeScopeFlag('Wanderer')).AddScope('xp', MakeScopeValue(TraitLevelTrackEntry.GetXpRequired)).End)]"
                                                }

                                                # Danger
                                                button_round = {
                                                    scale = 0.75
                                                    visible = "[EqualTo_string( TraitLevelTrack.GetName, Localize('trait_track_danger'))]"
                                                    datacontext = "[TraitLevelTrack.GetEntryForXp( ComplexBarItem.GetValue )]"
                                                    raw_text = "[TraitLevelTrackEntry.GetLevel]"
                                                    onclick = "[GetScriptedGui('DI_add_trait_xp').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('trait', Trait.MakeScope).AddScope('track', MakeScopeFlag('Seasoned')).AddScope('xp', MakeScopeValue(TraitLevelTrackEntry.GetXpRequired)).End)]"
                                                }

                                                # Hunter
                                                button_round = {
                                                    scale = 0.75
                                                    visible = "[EqualTo_string( TraitLevelTrack.GetName, Localize('trait_track_hunter'))]"
                                                    datacontext = "[TraitLevelTrack.GetEntryForXp( ComplexBarItem.GetValue )]"
                                                    raw_text = "[TraitLevelTrackEntry.GetLevel]"
                                                    onclick = "[GetScriptedGui('DI_add_trait_xp').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('trait', Trait.MakeScope).AddScope('track', MakeScopeFlag('Venator')).AddScope('xp', MakeScopeValue(TraitLevelTrackEntry.GetXpRequired)).End)]"
                                                }

                                                # Falconer
                                                button_round = {
                                                    scale = 0.75
                                                    visible = "[EqualTo_string( TraitLevelTrack.GetName, Localize('trait_track_falconer'))]"
                                                    datacontext = "[TraitLevelTrack.GetEntryForXp( ComplexBarItem.GetValue )]"
                                                    raw_text = "[TraitLevelTrackEntry.GetLevel]"
                                                    onclick = "[GetScriptedGui('DI_add_trait_xp').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('trait', Trait.MakeScope).AddScope('track', MakeScopeFlag('Falconer')).AddScope('xp', MakeScopeValue(TraitLevelTrackEntry.GetXpRequired)).End)]"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    type widget_DI_trait_loader = widget {
        size = { 0 0 }

        vbox = {
            using = Animation_Tab_Switch

            state = {
                name = trait_loader
                trigger_when = "[Not(EqualTo_string(Trait.GetNameNoTooltip( GetNullCharacter ), Localize('')))]"
                on_start = "[GetScriptedGui('DI_trait_loader_sgui').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('trait', Trait.MakeScope).AddScope('tracked', MakeScopeFlag('no')).End)]"
            }

            state = {
                name = tracked_trait_loader
                trigger_when = "[And(Not(EqualTo_string(Trait.GetNameNoTooltip( GetNullCharacter ), Localize(''))), DataModelHasItems( Trait.GetLevelTracks ))]"
                on_start = "[GetScriptedGui('DI_trait_loader_sgui').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('trait', Trait.MakeScope).AddScope('tracked', MakeScopeFlag('yes')).End)]"
            }
        }
    }

    type DI_trait_icon_base = trait_icon_texture
    {
        alwaystransparent = yes

        tooltipwidget = {
            using = DI_character_trait_tooltip
        }
        block "tooltip_placement"
        {
            using = tooltip_se
        }
    }

    type DI_icon_trait = container
    {
        block "faith_context"
        {
            datacontext = "[Character.GetFaith]"
        }

        DI_trait_icon_base = {
            name = "normal_trait"
            visible = "[Not( Or( Or( Or( Trait.IsGenetic, Trait.IsInheritable ), Faith.IsTraitVirtue( Trait.Self ) ), Faith.IsTraitSin( Trait.Self ) ) )]"

            blockoverride "glow"
            {
                block "trait_glow"
                {
                }
            }
        }
        DI_trait_icon_base = {
            name = "inheritable_trait"
            visible = "[Or( Trait.IsGenetic, Trait.IsInheritable )]"

            blockoverride "glow"
            {
                block "trait_glow"
                {
                    glow = {
                        using = Color_Blue
                        using = Glow_Standard
                        block "glow_radius"
                        {
                            glow_radius = 5
                        }
                    }
                }
            }
        }
        DI_trait_icon_base = {
            name = "virtue_trait"
            visible = "[Faith.IsTraitVirtue( Trait.Self )]"

            blockoverride "glow"
            {
                block "trait_glow"
                {
                    glow = {
                        using = Color_Green
                        using = Glow_Standard
                        block "glow_radius"
                        {
                            glow_radius = 5
                        }
                    }
                }
            }
        }
        DI_trait_icon_base = {
            name = "sin_trait"
            visible = "[Faith.IsTraitSin( Trait.Self )]"

            blockoverride "glow"
            {
                block "trait_glow"
                {
                    glow = {
                        using = Color_Red
                        using = Glow_Standard
                        block "glow_radius"
                        {
                            glow_radius = 5
                        }
                    }
                }
            }
        }

        #icon = {
        #	visible = "[Or(Trait.IsGenetic, Trait.IsInheritable)]"
        #	parentanchor = right
        #	position = { 2 0 }
        #	texture = "gfx/interface/icons/traits/congenital.dds"
        #}

        # icon = {
        # 	name = "overlay"
        # 	alwaystransparent = yes
        # 	texture = "[Trait.GetIconOverlayForLocalPlayer]"

        # 	block "overlay_position"
        # 	{
        # 		position = { -10 -10 }
        # 	}

        # 	block "overlay_anchor"
        # 	{
        # 		parentanchor = "bottom|right"
        # 		widgetanchor = "vcenter|hcenter"
        # 	}

        # 	block "overlay_size"
        # 	{
        # 		size = { 24 24 }
        # 	}
        # }
    }
}